import java.io.*; //I/O classes
import java.util.Scanner; // Scanner class

public class Cai{
	public static boolean isNumeric(String input) {
		try {
		  Integer.parseInt(input);
		  return true;
		}
		catch (NumberFormatException e) {
		  return false;
		}
	}
		
	public static void entrySetPrint(BinarySearchTreeMap<String, Integer> L){
		System.out.println("\n======phonebook directory======\n");

		Iterator<Entry<String, Integer>> i = L.entrySet().iterator();
			Entry<String, Integer> temp;
			while (i.hasNext()) {
				temp = i.next();
				if ((temp.getKey() != null) && (temp.getValue() != null))
				System.out.println("["+temp.getKey()+"\t-\t"+ temp.getValue()+"]");
			}
		System.out.println("\n================================\n");

	}


	public static void keySetPrint(BinarySearchTreeMap<String, Integer> L){
	
	System.out.println("\n======phonebook directory======\n");
	
	Iterator<String> i = L.keySet().iterator();
		String key;
		while (i.hasNext()) {
			key = i.next();
			if (key != null)
				System.out.println(key);
		}
		System.out.println("\n================================\n");

}


	public static void valuesPrint(BinarySearchTreeMap<String, Integer> L){
	
	System.out.println("\n======phonebook directory======\n");

	Iterator<Integer> v = L.values().iterator();
		Integer value;
		while (v.hasNext()) {
			value = v.next();
			if (value != null)
				System.out.println(value);
		}

		System.out.println("\n================================\n");

	}



	public static void main(String argv[]) throws IOException {
		BinarySearchTreeMap<String, Integer> directory 
      = new BinarySearchTreeMap<String, Integer>();
		Scanner s = new Scanner(System.in);
		String input = "1";
	

	
		while (!(input.equals("7"))){
			System.out.println("");
			System.out.println("=============Choice for directory operations===========\n");
			
			System.out.println("(1)\tSearch for a name =>");
			System.out.println("(2)\tAdd a new entry =>");
			System.out.println("(3)\tRemove an exsiting entry =>");
			System.out.println("(4)\tList all entries in directory =>(alphabetical by lastname)");
			System.out.println("(5)\tList names in directory =>");
			System.out.println("(6)\tList all phone numbers in directory =>");
			System.out.println("(7)\tTerminate =>");
					
			System.out.print("\nPlease enter a number between 1-7 for options: ");			
			input = s.nextLine();

			//Option 1: Search an entry in the directory; given a name as input from the user and output the name and a number if the entry exists.
			if (input.equals("1")){
				
				System.out.print("\n\tPlease enter the name (Last name, first name): ");
				Scanner search = new Scanner(System.in);
				String name = search.nextLine().toLowerCase();
				while ((directory.get(name) == null) && !(name.equals("0"))){
					System.out.print("\tError: name does not exist. Please enter a valid name:  ");
					name = search.nextLine().toLowerCase();
				}
				System.out.println("");
				if (!(name.equals("0")))
					System.out.println("\t"+name+" ---extension: "+directory.get(name)+"\n\tEnter 0 to quit: ") ;
				
			}

			//Option 2
			else if (input.equals("2")){
				System.out.print("\tPlease enter a user to be added (last name followed by first name: ");
				Scanner str = new Scanner(System.in);
				String name = str.nextLine().toLowerCase();
				System.out.print("\tPlease enter the 5-digit extension: ");
				Scanner n = new Scanner(System.in);
				String number = n.nextLine();
				while ((!(isNumeric(number)) || (number.length() != 5)) && !(number.equals("0"))){
					System.out.print("\tError: Please enter a valid 5-digit number or 0 to exit:  ");
					number = n.nextLine().toLowerCase();
				}
				if (!(number.equals("0"))){
					int number2 = Integer.parseInt(number);
					directory.put(name, number2);				
				}
			}


			//Option 3
			else if (input.equals("3")){
				System.out.println("3.\tREMOVE ENTRY");
				System.out.print("\tPlease enter a user to be removed by name in the format LAST, FIRST: ");
				Scanner remove = new Scanner(System.in);
				String removeName = remove.nextLine();
				removeName = removeName.toUpperCase();
				while ((directory.get(removeName) == null) && !(removeName.equals("EXIT"))){
					System.out.print("\tERROR: User not found. Please enter new name or type exit to quit: ");
					removeName = remove.nextLine();
					removeName = removeName.toUpperCase();
				}
				if (!(removeName.equals("EXIT"))){
					directory.remove(removeName);
					System.out.println("");
					System.out.println("\tUser successfully removed.");
				}

			}

			//OPTION 4: LISTS ALL ENTRIES and tests to see if the directory is empty or not.
			else if (input.equals("4")){
				System.out.println("4.\tLIST ALL ENTRIES");
				System.out.print("\t");
				if (!(directory.isEmpty()))
					entrySetPrint(directory);
				else
					System.out.println("The directory is Currently Empty.");
			}

			//OPTION 5: LISTS ALL NAMES and tests to see if the directory is empty or not.
			else if (input.equals("5")){
				System.out.println("4.\tLIST ALL NAMES");
				System.out.print("\t");
				if (!(directory.isEmpty()))
					keySetPrint(directory);
				else
					System.out.println("The directory is Currently Empty.");
			}

			//OPTION 6: LISTS ALL NUMBERS and tests to see if the directory is empty or not.
			else if (input.equals("6")){
				System.out.println("4.\tLIST ALL NUMBERS");
				System.out.print("\t");
				if (!(directory.isEmpty()))
					valuesPrint(directory);
				else
					System.out.println("The directory is Currently Empty.");
			}

			//OPTION 7: TERMINATES THE PROGRAM.  Runs a validation script to ask user if they would like to exit or not.
			else if (input.equals("7")){ 
				System.out.println("7.\tTERMINATE");
				Scanner b = new Scanner(System.in);
				System.out.print("\tAre you sure you want to end the session [Y/N]?: ");
				String validation = b.nextLine();
				validation = validation.toUpperCase();
				if ((validation.equals("Y")) || (validation.equals("YES"))){
					System.out.println("");
					System.out.println("\tTERMINATING SESSION...");
					System.out.println("");		
					break;		
				}
				else
					input = "0";
				}

			//OTHERWISE: Corrects for incorrect input, and redirects the user to the menu.
			else{
			System.out.println("");
			System.out.println("ERROR: You entered a value which did not correlate to a menu option.  Please try again.");
			}

		}
	}
}

