/**
 * This program reads a text file specified in a command-line argument 
 * into a string named inString.  It also has a code segment to echo 
 * print inString.  To execute, assuming an input file is named filename 
 * and exists in the same directory as CheckBraces.class, type
 *
 *   java CheckBraces filename
 *
 * @author Cotter Phinney and Kevin Liu
 * @version 1.0
 * 
 */

import java.io.*;

public class CheckBraces {

  public static void main(String args[]) {
    String inString = null;
    if (args.length < 1) {
      System.out.println("Usage: java CheckBraces sourcefile");
      return;
    }

    // Read the file named as the command-line argument
    try {
      File f = new File(args[0]);
      InputStreamReader inStream = 
        new InputStreamReader(new FileInputStream(f));
      int length = (int) f.length();
      char input[] = new char[length];
      inStream.read(input);
      inString = new String(input);
    } 
    catch (FileNotFoundException e) {
      System.err.println("Error: File " + args[0] + " not found");
      e.printStackTrace();
    }
    catch (IOException e) {
      System.err.println("Error: I/O exception");
      e.printStackTrace();
    }
	
    // Echo print the file
    for (int k = 0; k < inString.length(); k++)
      System.out.print(inString.charAt(k));
    System.out.println();
    
    // create new ArrayStack
    ArrayStack<Character> stack = new ArrayStack<Character>();
    
    // expect represents an open brace's closing brace
    char expect = ' ';
    // loop through every char in inString
    for (int i = 0; i < inString.length(); i++) {
    	// set c equal to current character
    	char c = inString.charAt(i);
    	// check if character is open brace
    	if (c == '(' || c == '[' || c == '{')
    		// push braces to stack
    		stack.push(c);
    	// check if character is closed brace
    	else if (c == ')' || c == ']' || c == '}') {
    		// if character is closed brace and stack is empty, print error and exit
				if (stack.isEmpty()) {
					System.out.println("Unmatched brace at character "+i+": No opening brace for "+c+".");
					System.exit(0);
				}
				// otherwise set c's expected brace
				if (stack.top() == '(') {
					expect = ')';
				} else if (stack.top() == '[') {
					expect = ']';
				} else if (stack.top() == '{') {
					expect = '}';
				}

				// if c and expected don't match, print error and exit. otherwise pop from stack
		  	if (c != expect) {
    			System.out.println("Unmatched brace at character "+i+": Found "+c+" expecting "+expect+".");
    			System.exit(0);
    		} else 
    			stack.pop();
    	}
		}
		
		if (!stack.isEmpty())
			System.out.println("Unmatched brace: No closing brace for "+stack.pop()+".");
		else
			System.out.println("All braces are valid.");
			
  }
}
